// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnterSceneRes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EnterSceneRes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EnterSceneRes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EnterSceneRes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EnterSceneRes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EnterSceneRes_2eproto;
namespace Protocol {
class EnterSceneRes;
struct EnterSceneResDefaultTypeInternal;
extern EnterSceneResDefaultTypeInternal _EnterSceneRes_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EnterSceneRes* Arena::CreateMaybeMessage<::Protocol::EnterSceneRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class EnterSceneRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterSceneRes) */ {
 public:
  inline EnterSceneRes() : EnterSceneRes(nullptr) {}
  ~EnterSceneRes() override;
  explicit PROTOBUF_CONSTEXPR EnterSceneRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterSceneRes(const EnterSceneRes& from);
  EnterSceneRes(EnterSceneRes&& from) noexcept
    : EnterSceneRes() {
    *this = ::std::move(from);
  }

  inline EnterSceneRes& operator=(const EnterSceneRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterSceneRes& operator=(EnterSceneRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterSceneRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterSceneRes* internal_default_instance() {
    return reinterpret_cast<const EnterSceneRes*>(
               &_EnterSceneRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnterSceneRes& a, EnterSceneRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterSceneRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterSceneRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterSceneRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterSceneRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterSceneRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterSceneRes& from) {
    EnterSceneRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterSceneRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterSceneRes";
  }
  protected:
  explicit EnterSceneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneNameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string sceneName = 2;
  void clear_scenename();
  const std::string& scenename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenename();
  PROTOBUF_NODISCARD std::string* release_scenename();
  void set_allocated_scenename(std::string* scenename);
  private:
  const std::string& _internal_scenename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenename(const std::string& value);
  std::string* _internal_mutable_scenename();
  public:

  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterSceneRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenename_;
    ::Protocol::Vector3* position_;
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EnterSceneRes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnterSceneRes

// int32 result = 1;
inline void EnterSceneRes::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t EnterSceneRes::_internal_result() const {
  return _impl_.result_;
}
inline int32_t EnterSceneRes::result() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterSceneRes.result)
  return _internal_result();
}
inline void EnterSceneRes::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void EnterSceneRes::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterSceneRes.result)
}

// string sceneName = 2;
inline void EnterSceneRes::clear_scenename() {
  _impl_.scenename_.ClearToEmpty();
}
inline const std::string& EnterSceneRes::scenename() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterSceneRes.sceneName)
  return _internal_scenename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterSceneRes::set_scenename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scenename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EnterSceneRes.sceneName)
}
inline std::string* EnterSceneRes::mutable_scenename() {
  std::string* _s = _internal_mutable_scenename();
  // @@protoc_insertion_point(field_mutable:Protocol.EnterSceneRes.sceneName)
  return _s;
}
inline const std::string& EnterSceneRes::_internal_scenename() const {
  return _impl_.scenename_.Get();
}
inline void EnterSceneRes::_internal_set_scenename(const std::string& value) {
  
  _impl_.scenename_.Set(value, GetArenaForAllocation());
}
inline std::string* EnterSceneRes::_internal_mutable_scenename() {
  
  return _impl_.scenename_.Mutable(GetArenaForAllocation());
}
inline std::string* EnterSceneRes::release_scenename() {
  // @@protoc_insertion_point(field_release:Protocol.EnterSceneRes.sceneName)
  return _impl_.scenename_.Release();
}
inline void EnterSceneRes::set_allocated_scenename(std::string* scenename) {
  if (scenename != nullptr) {
    
  } else {
    
  }
  _impl_.scenename_.SetAllocated(scenename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scenename_.IsDefault()) {
    _impl_.scenename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnterSceneRes.sceneName)
}

// .Protocol.Vector3 position = 3;
inline bool EnterSceneRes::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool EnterSceneRes::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& EnterSceneRes::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& EnterSceneRes::position() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterSceneRes.position)
  return _internal_position();
}
inline void EnterSceneRes::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.EnterSceneRes.position)
}
inline ::Protocol::Vector3* EnterSceneRes::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* EnterSceneRes::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.EnterSceneRes.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* EnterSceneRes::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* EnterSceneRes::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.EnterSceneRes.position)
  return _msg;
}
inline void EnterSceneRes::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnterSceneRes.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EnterSceneRes_2eproto
