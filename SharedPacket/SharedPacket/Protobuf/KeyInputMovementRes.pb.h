// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeyInputMovementRes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeyInputMovementRes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeyInputMovementRes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeyInputMovementRes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeyInputMovementRes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeyInputMovementRes_2eproto;
namespace Protocol {
class KeyInputMovementRes;
struct KeyInputMovementResDefaultTypeInternal;
extern KeyInputMovementResDefaultTypeInternal _KeyInputMovementRes_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::KeyInputMovementRes* Arena::CreateMaybeMessage<::Protocol::KeyInputMovementRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class KeyInputMovementRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.KeyInputMovementRes) */ {
 public:
  inline KeyInputMovementRes() : KeyInputMovementRes(nullptr) {}
  ~KeyInputMovementRes() override;
  explicit PROTOBUF_CONSTEXPR KeyInputMovementRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyInputMovementRes(const KeyInputMovementRes& from);
  KeyInputMovementRes(KeyInputMovementRes&& from) noexcept
    : KeyInputMovementRes() {
    *this = ::std::move(from);
  }

  inline KeyInputMovementRes& operator=(const KeyInputMovementRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyInputMovementRes& operator=(KeyInputMovementRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyInputMovementRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyInputMovementRes* internal_default_instance() {
    return reinterpret_cast<const KeyInputMovementRes*>(
               &_KeyInputMovementRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyInputMovementRes& a, KeyInputMovementRes& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyInputMovementRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyInputMovementRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyInputMovementRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyInputMovementRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyInputMovementRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyInputMovementRes& from) {
    KeyInputMovementRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyInputMovementRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.KeyInputMovementRes";
  }
  protected:
  explicit KeyInputMovementRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUpFieldNumber = 2,
    kDownFieldNumber = 3,
    kLeftFieldNumber = 4,
    kRightFieldNumber = 5,
  };
  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // bool up = 2;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // bool down = 3;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // bool left = 4;
  void clear_left();
  bool left() const;
  void set_left(bool value);
  private:
  bool _internal_left() const;
  void _internal_set_left(bool value);
  public:

  // bool right = 5;
  void clear_right();
  bool right() const;
  void set_right(bool value);
  private:
  bool _internal_right() const;
  void _internal_set_right(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.KeyInputMovementRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t result_;
    bool up_;
    bool down_;
    bool left_;
    bool right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeyInputMovementRes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyInputMovementRes

// int32 result = 1;
inline void KeyInputMovementRes::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t KeyInputMovementRes::_internal_result() const {
  return _impl_.result_;
}
inline int32_t KeyInputMovementRes::result() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInputMovementRes.result)
  return _internal_result();
}
inline void KeyInputMovementRes::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void KeyInputMovementRes::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInputMovementRes.result)
}

// bool up = 2;
inline void KeyInputMovementRes::clear_up() {
  _impl_.up_ = false;
}
inline bool KeyInputMovementRes::_internal_up() const {
  return _impl_.up_;
}
inline bool KeyInputMovementRes::up() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInputMovementRes.up)
  return _internal_up();
}
inline void KeyInputMovementRes::_internal_set_up(bool value) {
  
  _impl_.up_ = value;
}
inline void KeyInputMovementRes::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInputMovementRes.up)
}

// bool down = 3;
inline void KeyInputMovementRes::clear_down() {
  _impl_.down_ = false;
}
inline bool KeyInputMovementRes::_internal_down() const {
  return _impl_.down_;
}
inline bool KeyInputMovementRes::down() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInputMovementRes.down)
  return _internal_down();
}
inline void KeyInputMovementRes::_internal_set_down(bool value) {
  
  _impl_.down_ = value;
}
inline void KeyInputMovementRes::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInputMovementRes.down)
}

// bool left = 4;
inline void KeyInputMovementRes::clear_left() {
  _impl_.left_ = false;
}
inline bool KeyInputMovementRes::_internal_left() const {
  return _impl_.left_;
}
inline bool KeyInputMovementRes::left() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInputMovementRes.left)
  return _internal_left();
}
inline void KeyInputMovementRes::_internal_set_left(bool value) {
  
  _impl_.left_ = value;
}
inline void KeyInputMovementRes::set_left(bool value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInputMovementRes.left)
}

// bool right = 5;
inline void KeyInputMovementRes::clear_right() {
  _impl_.right_ = false;
}
inline bool KeyInputMovementRes::_internal_right() const {
  return _impl_.right_;
}
inline bool KeyInputMovementRes::right() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInputMovementRes.right)
  return _internal_right();
}
inline void KeyInputMovementRes::_internal_set_right(bool value) {
  
  _impl_.right_ = value;
}
inline void KeyInputMovementRes::set_right(bool value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInputMovementRes.right)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeyInputMovementRes_2eproto
