// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PROJECTILE_INFO.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from PROJECTILE_INFO.proto</summary>
  public static partial class PROJECTILEINFOReflection {

    #region Descriptor
    /// <summary>File descriptor for PROJECTILE_INFO.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PROJECTILEINFOReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQUk9KRUNUSUxFX0lORk8ucHJvdG8SCFByb3RvY29sGg1WRUNUT1IzLnBy",
            "b3RvIrABCg9QUk9KRUNUSUxFX0lORk8SFAoMcHJvamVjdGlsZUlkGAEgASgF",
            "EhcKD3Byb2plY3RpbGVJbmRleBgCIAEoBRINCgVzcGVlZBgDIAEoBRIQCght",
            "YXhSYW5nZRgEIAEoBRIjCghwb3NpdGlvbhgFIAEoCzIRLlByb3RvY29sLlZF",
            "Q1RPUjMSKAoNbW92ZURpcmVjdGlvbhgGIAEoCzIRLlByb3RvY29sLlZFQ1RP",
            "UjNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.VECTOR3Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PROJECTILE_INFO), global::Protocol.PROJECTILE_INFO.Parser, new[]{ "ProjectileId", "ProjectileIndex", "Speed", "MaxRange", "Position", "MoveDirection" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PROJECTILE_INFO : pb::IMessage<PROJECTILE_INFO>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PROJECTILE_INFO> _parser = new pb::MessageParser<PROJECTILE_INFO>(() => new PROJECTILE_INFO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PROJECTILE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.PROJECTILEINFOReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PROJECTILE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PROJECTILE_INFO(PROJECTILE_INFO other) : this() {
      projectileId_ = other.projectileId_;
      projectileIndex_ = other.projectileIndex_;
      speed_ = other.speed_;
      maxRange_ = other.maxRange_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      moveDirection_ = other.moveDirection_ != null ? other.moveDirection_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PROJECTILE_INFO Clone() {
      return new PROJECTILE_INFO(this);
    }

    /// <summary>Field number for the "projectileId" field.</summary>
    public const int ProjectileIdFieldNumber = 1;
    private int projectileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProjectileId {
      get { return projectileId_; }
      set {
        projectileId_ = value;
      }
    }

    /// <summary>Field number for the "projectileIndex" field.</summary>
    public const int ProjectileIndexFieldNumber = 2;
    private int projectileIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProjectileIndex {
      get { return projectileIndex_; }
      set {
        projectileIndex_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "maxRange" field.</summary>
    public const int MaxRangeFieldNumber = 4;
    private int maxRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxRange {
      get { return maxRange_; }
      set {
        maxRange_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Protocol.VECTOR3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Protocol.VECTOR3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "moveDirection" field.</summary>
    public const int MoveDirectionFieldNumber = 6;
    private global::Protocol.VECTOR3 moveDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Protocol.VECTOR3 MoveDirection {
      get { return moveDirection_; }
      set {
        moveDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PROJECTILE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PROJECTILE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectileId != other.ProjectileId) return false;
      if (ProjectileIndex != other.ProjectileIndex) return false;
      if (Speed != other.Speed) return false;
      if (MaxRange != other.MaxRange) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(MoveDirection, other.MoveDirection)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectileId != 0) hash ^= ProjectileId.GetHashCode();
      if (ProjectileIndex != 0) hash ^= ProjectileIndex.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (MaxRange != 0) hash ^= MaxRange.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (moveDirection_ != null) hash ^= MoveDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectileId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProjectileId);
      }
      if (ProjectileIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProjectileIndex);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (MaxRange != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxRange);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (moveDirection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MoveDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectileId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProjectileId);
      }
      if (ProjectileIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProjectileIndex);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (MaxRange != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxRange);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (moveDirection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MoveDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProjectileId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectileId);
      }
      if (ProjectileIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectileIndex);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (MaxRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRange);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (moveDirection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PROJECTILE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.ProjectileId != 0) {
        ProjectileId = other.ProjectileId;
      }
      if (other.ProjectileIndex != 0) {
        ProjectileIndex = other.ProjectileIndex;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.MaxRange != 0) {
        MaxRange = other.MaxRange;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Protocol.VECTOR3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.moveDirection_ != null) {
        if (moveDirection_ == null) {
          MoveDirection = new global::Protocol.VECTOR3();
        }
        MoveDirection.MergeFrom(other.MoveDirection);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProjectileId = input.ReadInt32();
            break;
          }
          case 16: {
            ProjectileIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            MaxRange = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Protocol.VECTOR3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            if (moveDirection_ == null) {
              MoveDirection = new global::Protocol.VECTOR3();
            }
            input.ReadMessage(MoveDirection);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ProjectileId = input.ReadInt32();
            break;
          }
          case 16: {
            ProjectileIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            MaxRange = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Protocol.VECTOR3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            if (moveDirection_ == null) {
              MoveDirection = new global::Protocol.VECTOR3();
            }
            input.ReadMessage(MoveDirection);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
