// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPCInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NPCInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NPCInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector3.pb.h"
#include "StatInfo.pb.h"
#include "NPCBaseInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NPCInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NPCInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NPCInfo_2eproto;
namespace Protocol {
class NPCInfo;
struct NPCInfoDefaultTypeInternal;
extern NPCInfoDefaultTypeInternal _NPCInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::NPCInfo* Arena::CreateMaybeMessage<::Protocol::NPCInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class NPCInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.NPCInfo) */ {
 public:
  inline NPCInfo() : NPCInfo(nullptr) {}
  ~NPCInfo() override;
  explicit PROTOBUF_CONSTEXPR NPCInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NPCInfo(const NPCInfo& from);
  NPCInfo(NPCInfo&& from) noexcept
    : NPCInfo() {
    *this = ::std::move(from);
  }

  inline NPCInfo& operator=(const NPCInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NPCInfo& operator=(NPCInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NPCInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NPCInfo* internal_default_instance() {
    return reinterpret_cast<const NPCInfo*>(
               &_NPCInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NPCInfo& a, NPCInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NPCInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NPCInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NPCInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NPCInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NPCInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NPCInfo& from) {
    NPCInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NPCInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.NPCInfo";
  }
  protected:
  explicit NPCInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcBaseInfoFieldNumber = 1,
    kStatInfoFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // .Protocol.NPCBaseInfo npcBaseInfo = 1;
  bool has_npcbaseinfo() const;
  private:
  bool _internal_has_npcbaseinfo() const;
  public:
  void clear_npcbaseinfo();
  const ::Protocol::NPCBaseInfo& npcbaseinfo() const;
  PROTOBUF_NODISCARD ::Protocol::NPCBaseInfo* release_npcbaseinfo();
  ::Protocol::NPCBaseInfo* mutable_npcbaseinfo();
  void set_allocated_npcbaseinfo(::Protocol::NPCBaseInfo* npcbaseinfo);
  private:
  const ::Protocol::NPCBaseInfo& _internal_npcbaseinfo() const;
  ::Protocol::NPCBaseInfo* _internal_mutable_npcbaseinfo();
  public:
  void unsafe_arena_set_allocated_npcbaseinfo(
      ::Protocol::NPCBaseInfo* npcbaseinfo);
  ::Protocol::NPCBaseInfo* unsafe_arena_release_npcbaseinfo();

  // .Protocol.StatInfo statInfo = 2;
  bool has_statinfo() const;
  private:
  bool _internal_has_statinfo() const;
  public:
  void clear_statinfo();
  const ::Protocol::StatInfo& statinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StatInfo* release_statinfo();
  ::Protocol::StatInfo* mutable_statinfo();
  void set_allocated_statinfo(::Protocol::StatInfo* statinfo);
  private:
  const ::Protocol::StatInfo& _internal_statinfo() const;
  ::Protocol::StatInfo* _internal_mutable_statinfo();
  public:
  void unsafe_arena_set_allocated_statinfo(
      ::Protocol::StatInfo* statinfo);
  ::Protocol::StatInfo* unsafe_arena_release_statinfo();

  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:Protocol.NPCInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NPCBaseInfo* npcbaseinfo_;
    ::Protocol::StatInfo* statinfo_;
    ::Protocol::Vector3* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NPCInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NPCInfo

// .Protocol.NPCBaseInfo npcBaseInfo = 1;
inline bool NPCInfo::_internal_has_npcbaseinfo() const {
  return this != internal_default_instance() && _impl_.npcbaseinfo_ != nullptr;
}
inline bool NPCInfo::has_npcbaseinfo() const {
  return _internal_has_npcbaseinfo();
}
inline const ::Protocol::NPCBaseInfo& NPCInfo::_internal_npcbaseinfo() const {
  const ::Protocol::NPCBaseInfo* p = _impl_.npcbaseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NPCBaseInfo&>(
      ::Protocol::_NPCBaseInfo_default_instance_);
}
inline const ::Protocol::NPCBaseInfo& NPCInfo::npcbaseinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.NPCInfo.npcBaseInfo)
  return _internal_npcbaseinfo();
}
inline void NPCInfo::unsafe_arena_set_allocated_npcbaseinfo(
    ::Protocol::NPCBaseInfo* npcbaseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.npcbaseinfo_);
  }
  _impl_.npcbaseinfo_ = npcbaseinfo;
  if (npcbaseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.NPCInfo.npcBaseInfo)
}
inline ::Protocol::NPCBaseInfo* NPCInfo::release_npcbaseinfo() {
  
  ::Protocol::NPCBaseInfo* temp = _impl_.npcbaseinfo_;
  _impl_.npcbaseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NPCBaseInfo* NPCInfo::unsafe_arena_release_npcbaseinfo() {
  // @@protoc_insertion_point(field_release:Protocol.NPCInfo.npcBaseInfo)
  
  ::Protocol::NPCBaseInfo* temp = _impl_.npcbaseinfo_;
  _impl_.npcbaseinfo_ = nullptr;
  return temp;
}
inline ::Protocol::NPCBaseInfo* NPCInfo::_internal_mutable_npcbaseinfo() {
  
  if (_impl_.npcbaseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NPCBaseInfo>(GetArenaForAllocation());
    _impl_.npcbaseinfo_ = p;
  }
  return _impl_.npcbaseinfo_;
}
inline ::Protocol::NPCBaseInfo* NPCInfo::mutable_npcbaseinfo() {
  ::Protocol::NPCBaseInfo* _msg = _internal_mutable_npcbaseinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.NPCInfo.npcBaseInfo)
  return _msg;
}
inline void NPCInfo::set_allocated_npcbaseinfo(::Protocol::NPCBaseInfo* npcbaseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.npcbaseinfo_);
  }
  if (npcbaseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcbaseinfo));
    if (message_arena != submessage_arena) {
      npcbaseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcbaseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.npcbaseinfo_ = npcbaseinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.NPCInfo.npcBaseInfo)
}

// .Protocol.StatInfo statInfo = 2;
inline bool NPCInfo::_internal_has_statinfo() const {
  return this != internal_default_instance() && _impl_.statinfo_ != nullptr;
}
inline bool NPCInfo::has_statinfo() const {
  return _internal_has_statinfo();
}
inline const ::Protocol::StatInfo& NPCInfo::_internal_statinfo() const {
  const ::Protocol::StatInfo* p = _impl_.statinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatInfo&>(
      ::Protocol::_StatInfo_default_instance_);
}
inline const ::Protocol::StatInfo& NPCInfo::statinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.NPCInfo.statInfo)
  return _internal_statinfo();
}
inline void NPCInfo::unsafe_arena_set_allocated_statinfo(
    ::Protocol::StatInfo* statinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statinfo_);
  }
  _impl_.statinfo_ = statinfo;
  if (statinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.NPCInfo.statInfo)
}
inline ::Protocol::StatInfo* NPCInfo::release_statinfo() {
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StatInfo* NPCInfo::unsafe_arena_release_statinfo() {
  // @@protoc_insertion_point(field_release:Protocol.NPCInfo.statInfo)
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StatInfo* NPCInfo::_internal_mutable_statinfo() {
  
  if (_impl_.statinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatInfo>(GetArenaForAllocation());
    _impl_.statinfo_ = p;
  }
  return _impl_.statinfo_;
}
inline ::Protocol::StatInfo* NPCInfo::mutable_statinfo() {
  ::Protocol::StatInfo* _msg = _internal_mutable_statinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.NPCInfo.statInfo)
  return _msg;
}
inline void NPCInfo::set_allocated_statinfo(::Protocol::StatInfo* statinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statinfo_);
  }
  if (statinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statinfo));
    if (message_arena != submessage_arena) {
      statinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.statinfo_ = statinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.NPCInfo.statInfo)
}

// .Protocol.Vector3 position = 3;
inline bool NPCInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool NPCInfo::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& NPCInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& NPCInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.NPCInfo.position)
  return _internal_position();
}
inline void NPCInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.NPCInfo.position)
}
inline ::Protocol::Vector3* NPCInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* NPCInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.NPCInfo.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* NPCInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* NPCInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.NPCInfo.position)
  return _msg;
}
inline void NPCInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.NPCInfo.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NPCInfo_2eproto
